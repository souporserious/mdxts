import { Project, Node, SyntaxKind, SourceFile } from 'ts-morph'
import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs'
import { resolve } from 'node:path'
import globParent from 'glob-parent'

import { resolveTsConfigPath } from '../collections/resolve-ts-config-path'
import {
  PACKAGE_NAME,
  PACKAGE_DIRECTORY,
  FILENAME,
} from '../collections/import-maps'

/* Prime the file so it gets picked up by the bundler. */
writeFileSync(
  `${PACKAGE_DIRECTORY}/${FILENAME}`,
  `export * from '${PACKAGE_NAME}';\n`
)

/**
 * Generates the initial import maps for each file pattern at the root of the project.
 *
 * @param patterns - An array of file patterns to match.
 * @param sourceFilesMap - A map of file patterns to their respective source files.
 */
function initializeImportMap(
  patterns: string[],
  sourceFilesMap: Map<string, SourceFile[]>
) {
  const importMapEntries = patterns.flatMap((filePattern) => {
    const sourceFiles = sourceFilesMap.get(filePattern) || []
    const baseGlobPattern = globParent(filePattern)
    const allExtensions = Array.from(
      new Set(sourceFiles.map((sourceFile) => sourceFile.getExtension()))
    )

    return allExtensions.map((extension) => {
      const trimmedExtension = extension.slice(1)
      return `  ['${trimmedExtension}:${filePattern}', (slug) => import(\`${baseGlobPattern}/\${slug}${extension}\`)]`
    })
  })

  const currentImportMap = existsSync(`${PACKAGE_DIRECTORY}/${FILENAME}`)
    ? readFileSync(`${PACKAGE_DIRECTORY}/${FILENAME}`, 'utf-8')
    : null
  const nextImportMap = [
    `/* This file was automatically generated by the \`mdxts\` package. */`,
    `import { createCollection } from '${PACKAGE_NAME}';\n`,
    `createCollection.setImports([\n${importMapEntries.join(',\n')}\n]);\n`,
    `export * from '${PACKAGE_NAME}';`,
  ].join('\n')

  if (currentImportMap === nextImportMap) {
    return
  }

  writeFileSync(`${PACKAGE_DIRECTORY}/${FILENAME}`, nextImportMap)
}

/**
 * Collects file patterns and their corresponding source files.
 *
 * @param filePatterns - An array of file patterns to match.
 * @param tsConfigFilePath - The path to the TypeScript configuration file.
 * @returns A map of file patterns to their respective source files.
 */
function collectSourceFiles(
  filePatterns: string[],
  tsConfigFilePath: string
): Map<string, SourceFile[]> {
  const project = new Project({
    skipAddingFilesFromTsConfig: true,
    tsConfigFilePath: tsConfigFilePath,
  })
  const compilerOptions = project.getCompilerOptions()
  const sourceFilesMap = new Map<string, SourceFile[]>()

  filePatterns.forEach((filePattern) => {
    const absoluteGlobPattern =
      compilerOptions.baseUrl && compilerOptions.paths
        ? resolveTsConfigPath(
            compilerOptions.baseUrl,
            compilerOptions.paths,
            filePattern
          )
        : resolve(filePattern)
    let sourceFiles = project.getSourceFiles(absoluteGlobPattern)

    if (sourceFiles.length === 0) {
      sourceFiles = project.addSourceFilesAtPaths(absoluteGlobPattern)
    }

    if (sourceFiles.length === 0) {
      throw new Error(`No source files found for pattern: ${filePattern}`)
    }

    sourceFilesMap.set(filePattern, sourceFiles)
  })

  return sourceFilesMap
}

/** Initializes an import map at the root of the project based on all `createCollection` file patterns. */
export function initializeImportMapFromCollections(project: Project) {
  const filePatterns = new Set<string>()

  project
    .createSourceFile(
      '_.ts',
      `import { createCollection } from '${PACKAGE_NAME}';`,
      { overwrite: true }
    )
    .getFirstDescendantByKindOrThrow(SyntaxKind.Identifier)
    .findReferencesAsNodes()
    .forEach((node) => {
      const callExpression = node.getParent()

      if (Node.isCallExpression(callExpression)) {
        const argument = callExpression.getArguments().at(0)
        if (Node.isStringLiteral(argument)) {
          const filePattern = argument.getLiteralText()
          filePatterns.add(filePattern)
        }
      }
    })

  if (filePatterns.size > 0) {
    const filePatternsArray = Array.from(filePatterns)
    const sourceFilesMap = collectSourceFiles(
      filePatternsArray,
      'tsconfig.json'
    )

    if (!existsSync(PACKAGE_DIRECTORY)) {
      mkdirSync(PACKAGE_DIRECTORY)
    }

    initializeImportMap(filePatternsArray, sourceFilesMap)
  }
}
